// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// CheckoutDynamodbClient is an autogenerated mock type for the CheckoutDynamodbClient type
type CheckoutDynamodbClient struct {
	mock.Mock
}

type CheckoutDynamodbClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckoutDynamodbClient) EXPECT() *CheckoutDynamodbClient_Expecter {
	return &CheckoutDynamodbClient_Expecter{mock: &_m.Mock}
}

// TransactWriteItems provides a mock function with given fields: input
func (_m *CheckoutDynamodbClient) TransactWriteItems(input *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	ret := _m.Called(input)

	var r0 *dynamodb.TransactWriteItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) *dynamodb.TransactWriteItemsOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactWriteItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TransactWriteItemsInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutDynamodbClient_TransactWriteItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItems'
type CheckoutDynamodbClient_TransactWriteItems_Call struct {
	*mock.Call
}

// TransactWriteItems is a helper method to define mock.On call
//   - input *dynamodb.TransactWriteItemsInput
func (_e *CheckoutDynamodbClient_Expecter) TransactWriteItems(input interface{}) *CheckoutDynamodbClient_TransactWriteItems_Call {
	return &CheckoutDynamodbClient_TransactWriteItems_Call{Call: _e.mock.On("TransactWriteItems", input)}
}

func (_c *CheckoutDynamodbClient_TransactWriteItems_Call) Run(run func(input *dynamodb.TransactWriteItemsInput)) *CheckoutDynamodbClient_TransactWriteItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TransactWriteItemsInput))
	})
	return _c
}

func (_c *CheckoutDynamodbClient_TransactWriteItems_Call) Return(_a0 *dynamodb.TransactWriteItemsOutput, _a1 error) *CheckoutDynamodbClient_TransactWriteItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CheckoutDynamodbClient_TransactWriteItems_Call) RunAndReturn(run func(*dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)) *CheckoutDynamodbClient_TransactWriteItems_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCheckoutDynamodbClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutDynamodbClient creates a new instance of CheckoutDynamodbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutDynamodbClient(t mockConstructorTestingTNewCheckoutDynamodbClient) *CheckoutDynamodbClient {
	mock := &CheckoutDynamodbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
