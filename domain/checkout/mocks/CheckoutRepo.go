// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/pevin/internal-pos-service-api/domain/checkout/entity"
	employeeentity "github.com/pevin/internal-pos-service-api/domain/employee/entity"

	mock "github.com/stretchr/testify/mock"
)

// CheckoutRepo is an autogenerated mock type for the CheckoutRepo type
type CheckoutRepo struct {
	mock.Mock
}

type CheckoutRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckoutRepo) EXPECT() *CheckoutRepo_Expecter {
	return &CheckoutRepo_Expecter{mock: &_m.Mock}
}

// Transact provides a mock function with given fields: co, bal, newBal
func (_m *CheckoutRepo) Transact(co entity.Checkout, bal employeeentity.Balance, newBal float64) error {
	ret := _m.Called(co, bal, newBal)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Checkout, employeeentity.Balance, float64) error); ok {
		r0 = rf(co, bal, newBal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutRepo_Transact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transact'
type CheckoutRepo_Transact_Call struct {
	*mock.Call
}

// Transact is a helper method to define mock.On call
//   - co entity.Checkout
//   - bal employeeentity.Balance
//   - newBal float64
func (_e *CheckoutRepo_Expecter) Transact(co interface{}, bal interface{}, newBal interface{}) *CheckoutRepo_Transact_Call {
	return &CheckoutRepo_Transact_Call{Call: _e.mock.On("Transact", co, bal, newBal)}
}

func (_c *CheckoutRepo_Transact_Call) Run(run func(co entity.Checkout, bal employeeentity.Balance, newBal float64)) *CheckoutRepo_Transact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Checkout), args[1].(employeeentity.Balance), args[2].(float64))
	})
	return _c
}

func (_c *CheckoutRepo_Transact_Call) Return(_a0 error) *CheckoutRepo_Transact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CheckoutRepo_Transact_Call) RunAndReturn(run func(entity.Checkout, employeeentity.Balance, float64) error) *CheckoutRepo_Transact_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCheckoutRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutRepo creates a new instance of CheckoutRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutRepo(t mockConstructorTestingTNewCheckoutRepo) *CheckoutRepo {
	mock := &CheckoutRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
